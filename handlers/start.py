from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.types import (
    CallbackQuery,
    Message,
)
from aiogram.utils.deep_linking import decode_payload

from keyboards import (
    base_cd,
    kb_from_mapping,
)
from loader import dp
from logger import logger


@dp.message_handler(Command('start'))
async def start(message: Message, state: FSMContext):
    user_id = message.from_user.id
    async with state.proxy() as data:
        role = data.get('role')

    if role:
        await message.answer(
            '–ö–∞–∂–µ—Ç—Å—è, –≤—ã —É–∂–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ –±–æ—Ç–µ. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /menu'
        )
        logger.debug(f'User {user_id} try to use /start command again')

    if args := message.get_args():
        if decode_payload(args) == 'expert':
            await message.answer(
                '–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤ –±–æ—Ç–µ –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ '
                '–≤—Å—Ç—Ä–µ—á —Å —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è–º–∏ –≤–∞–º –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.',
                reply_markup=kb_from_mapping({'expert_start': '–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É üñãÔ∏è'}),
            )
            logger.debug(f'User {user_id} start the bot as an expert')

            return

    await message.answer(
        '–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∫–∞–∂–∏—Ç–µ, –∫—Ç–æ –≤—ã',
        reply_markup=kb_from_mapping(
            {
                'applicant_start': '–Ø —Å–æ–∏—Å–∫–∞—Ç–µ–ª—å (—à–∫–æ–ª—å–Ω–∏–∫ –∏–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç)',
                'warn_expert_registration': '–Ø —ç–∫—Å–ø–µ—Ä—Ç'
            }
        ),
    )
    logger.debug(f'User {user_id} start bot')


@dp.callback_query_handler(base_cd.filter(value='warn_expert_registration'))
async def warn_expert_registration(call: CallbackQuery):
    await call.message.edit_text(
        '–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –Ω–µ –æ—à–∏–±–ª–∏—Å—å —Å –≤—ã–±–æ—Ä–æ–º —Ä–æ–ª–∏. –≠–∫—Å–ø–µ—Ä—Ç ‚Äî —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –†–æ—Å–∞—Ç–æ–º–∞, '
        '–∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≤–æ–¥–∏—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏. –°–æ–∏—Å–∫–∞—Ç–µ–ª—å –µ—â—ë –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –†–æ—Å–∞—Ç–æ–º–µ. '
        '–ï—Å–ª–∏ –≤—ã –æ—à–∏–±–ª–∏—Å—å —Ä–æ–ª—å—é, –≤—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥, –Ω–∞–∂–∞–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É',
        reply_markup=kb_from_mapping(
            {
                'back_to_the_choice': '–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Ä–æ–ª–∏',
                'expert_start': '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'
            }
        ),
    )
    logger.debug(f'User {call.from_user.id} enter warn_expert_registration handler')


@dp.callback_query_handler(base_cd.filter(value='back_to_the_choice'))
async def back_to_the_choice(call: CallbackQuery):
    await call.message.edit_text(
        '–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∫–∞–∂–∏—Ç–µ, –∫—Ç–æ –≤—ã',
        reply_markup=kb_from_mapping(
            {
                'applicant_start': '–Ø —Å–æ–∏—Å–∫–∞—Ç–µ–ª—å (—à–∫–æ–ª—å–Ω–∏–∫ –∏–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç)',
                'warn_expert_registration': '–Ø —ç–∫—Å–ø–µ—Ä—Ç',
            }
        ),
    )
    logger.debug(f'User {call.from_user.id} enter back_to_the_choice handler')
