from aiogram.dispatcher.filters import Command
from aiogram.types import Message, CallbackQuery
from handlers.utils import build_applicant_menu_message_text
from keyboards import kb1b, applicant_menu_kb, expert_menu_kb, kb2b
from loader import dp, db
from my_logger import logger
from aiogram.utils.deep_linking import decode_payload


@dp.message_handler(Command("menu"))
async def start(message: Message):
    user_id = message.from_user.id

    user_expert = db.get_expert(user_id)
    user_applicant = db.get_applicant(user_id)

    if user_applicant:
        await message.answer(
            text=build_applicant_menu_message_text(),
            reply_markup=applicant_menu_kb,
            disable_notification=True,
        )
        logger.debug(f'Applicant {user_id} use /menu command')
    elif user_expert:
        if user_expert[14] != "–ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏":
            await message.answer(text="–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é. –ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ —Å—é–¥–∞ –≤–µ—Ä–Ω—É—Ç—å—Å—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /menu",
                                 reply_markup=expert_menu_kb,
                                 disable_notification=True)
            logger.debug(f'Expert {user_id} use /menu command')
        else:
            await message.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞, –ø–æ–∫–∞ –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏")

            logger.debug(f'Expert on moderation {user_id} use /menu command')
    else:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ. –ß—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")

        logger.debug(f'User {user_id} use /menu command')


@dp.message_handler(Command("start"))
async def start(message: Message):
    user_id = message.from_user.id

    args = message.get_args()
    if args:
        try:
            payload = decode_payload(args)
            if payload == 'expert':
                await message.answer(text="–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤ –±–æ—Ç–µ –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ "
                                          "–≤—Å—Ç—Ä–µ—á —Å —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è–º–∏ –≤–∞–º –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.",
                                     reply_markup=kb1b("–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É üñãÔ∏è", "expert_start"))
                logger.debug(f'User {user_id} start the bot as an expert')
        except Exception as e:
            await message.answer(text="–ö–∞–∂–µ—Ç—Å—è, –≤—ã —É–∂–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ –±–æ—Ç–µ. "
                                      "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /menu")
            logger.warning(f'User {user_id} entered bot with unknown start args: {args}, '
                           f'and got exception: {e}')
    else:
        is_expert = db.get_expert(user_id) is not None
        is_applicant = db.get_applicant(user_id) is not None
        if not is_applicant and not is_expert:
            await message.answer(text="–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∫–∞–∂–∏—Ç–µ, –∫—Ç–æ –≤—ã:",
                                 reply_markup=kb2b("–Ø —Å–æ–∏—Å–∫–∞—Ç–µ–ª—å (—à–∫–æ–ª—å–Ω–∏–∫ –∏–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç)", "applicant_start",
                                                   "–Ø —ç–∫—Å–ø–µ—Ä—Ç", "warn_expert_registration"))
            logger.debug(f'User {user_id} start bot')
        else:
            await message.answer(text="–ö–∞–∂–µ—Ç—Å—è, –≤—ã —É–∂–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ –±–æ—Ç–µ. "
                                      "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /menu")
            logger.debug(f'User {user_id} tried to use /start command again')


@dp.callback_query_handler(text='warn_expert_registration')
async def back_to_the_choice(call: CallbackQuery):
    await call.answer(cache_time=5)
    await call.message.answer(text="–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –Ω–µ –æ—à–∏–±–ª–∏—Å—å —Å –≤—ã–±–æ—Ä–æ–º —Ä–æ–ª–∏. –≠–∫—Å–ø–µ—Ä—Ç ‚Äî —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –†–æ—Å–∞—Ç–æ–º–∞, "
                                   "–∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≤–æ–¥–∏—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏. –°–æ–∏—Å–∫–∞—Ç–µ–ª—å –µ—â—ë –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –†–æ—Å–∞—Ç–æ–º–µ. "
                                   "–ï—Å–ª–∏ –≤—ã –æ—à–∏–±–ª–∏—Å—å —Ä–æ–ª—å—é, –≤—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥, –Ω–∞–∂–∞–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É",
                              reply_markup=kb2b("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Ä–æ–ª–∏", "back_to_the_choice",
                                                "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", "expert_start"),
                              disable_notification=True)
    await call.message.edit_reply_markup()


@dp.callback_query_handler(text='back_to_the_choice')
async def back_to_the_choice(call: CallbackQuery):
    await call.message.edit_text(text="–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∫–∞–∂–∏—Ç–µ, –∫—Ç–æ –≤—ã:",
                                 reply_markup=kb2b("–Ø —Å–æ–∏—Å–∫–∞—Ç–µ–ª—å (—à–∫–æ–ª—å–Ω–∏–∫ –∏–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç)", "applicant_start",
                                                   "–Ø —ç–∫—Å–ø–µ—Ä—Ç", "warn_expert_registration"))
