from aiogram.dispatcher.filters import Command
from aiogram.types import Message
from keyboards import kb1b, applicant_menu_kb, expert_menu_kb, kb2b
from loader import dp, db
from my_logger import logger
from aiogram.utils.deep_linking import decode_payload


# @dp.message_handler(Command("start"))
# async def start(message: Message):
#     args = message.get_args()
#     date = message.date.strftime('%d.%m.%Y %H:%M')
#     if args:
#         try:
#             payload = decode_payload(args)
#             if payload == 'expert':
#                 db.add_expert(message.from_user.id, date, message.from_user.username, message.from_user.first_name,
#                               message.from_user.last_name)
#                 await message.answer(text="–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤ –±–æ—Ç–µ –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ "
#                                           "–≤—Å—Ç—Ä–µ—á —Å —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è–º–∏ –≤–∞–º –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.",
#                                      reply_markup=kb1b("–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É üñãÔ∏è", "expert_start"))
#                 logger.debug(f'User {message.from_user.id} start the bot as an expert')
#         except Exception as e:
#             await message.answer(text="–ö–∞–∂–µ—Ç—Å—è, –≤—ã —É–∂–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ –±–æ—Ç–µ. "
#                                       "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /menu")
#             logger.warning(f'User {message.from_user.id} entered bot with unknown start args: {args}, '
#                          f'and got exception: {e}')
#     else:
#         if db.get_expert(message.from_user.id) is None:
#             db.add_applicant(message.from_user.id, date, message.from_user.username, message.from_user.first_name,
#                              message.from_user.last_name)
#             await message.answer(text="–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤ –±–æ—Ç–µ –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ "
#                                       "–≤—Å—Ç—Ä–µ—á —Å —ç–∫—Å–ø–µ—Ä—Ç–∞–º–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.",
#                                  reply_markup=kb1b("–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É üñãÔ∏è", "applicant_start"))
#             logger.debug(f'User {message.from_user.id} start the bot as an applicant')
#         else:
#             await message.answer(text="–ö–∞–∂–µ—Ç—Å—è, –≤—ã —É–∂–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ –±–æ—Ç–µ. "
#                                       "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /menu")
#             logger.debug(f'User {message.from_user.id} tried to use /start command again')


@dp.message_handler(Command("menu"))
async def start(message: Message):
    user_expert = db.get_expert(message.from_user.id)
    user_applicant = db.get_applicant(message.from_user.id)

    if user_applicant:
        await message.answer(text="–¢—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é. –ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è —Å—é–¥–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ–π /menu",
                             reply_markup=applicant_menu_kb,
                             disable_notification=True)
        logger.debug(f'Applicant {message.from_user.id} use /menu command')
    elif user_expert:
        if user_expert[14] != "–ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏":
            await message.answer(text="–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é. –ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ —Å—é–¥–∞ –≤–µ—Ä–Ω—É—Ç—å—Å—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /menu",
                                 reply_markup=expert_menu_kb,
                                 disable_notification=True)
            logger.debug(f'Expert {message.from_user.id} use /menu command')
        else:
            await message.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞, –ø–æ–∫–∞ –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏")

            logger.debug(f'Expert on moderation {message.from_user.id} use /menu command')
    else:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ. –ß—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")

        logger.debug(f'User {message.from_user.id} use /menu command')


@dp.message_handler(Command("start"))
async def start(message: Message):
    args = message.get_args()
    if args:
        try:
            payload = decode_payload(args)
            if payload == 'expert':
                await message.answer(text="–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤ –±–æ—Ç–µ –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ "
                                          "–≤—Å—Ç—Ä–µ—á —Å —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è–º–∏ –≤–∞–º –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.",
                                     reply_markup=kb1b("–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É üñãÔ∏è", "expert_start"))
                logger.debug(f'User {message.from_user.id} start the bot as an expert')
        except Exception as e:
            await message.answer(text="–ö–∞–∂–µ—Ç—Å—è, –≤—ã —É–∂–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ –±–æ—Ç–µ. "
                                      "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /menu")
            logger.warning(f'User {message.from_user.id} entered bot with unknown start args: {args}, '
                           f'and got exception: {e}')
    else:
        if db.get_expert(message.from_user.id) is None and db.get_applicant(message.from_user.id) is None:
            await message.answer(text="–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∫–∞–∂–∏—Ç–µ, –∫—Ç–æ –≤—ã:",
                                 reply_markup=kb2b("–Ø —Å–æ–∏—Å–∫–∞—Ç–µ–ª—å", "applicant_start", "–Ø —ç–∫—Å–ø–µ—Ä—Ç", "expert_start"))
            logger.debug(f'User {message.from_user.id} start bot')
        else:
            await message.answer(text="–ö–∞–∂–µ—Ç—Å—è, –≤—ã —É–∂–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ –±–æ—Ç–µ. "
                                      "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /menu")
            logger.debug(f'User {message.from_user.id} tried to use /start command again')
