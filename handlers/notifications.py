from aiogram.dispatcher.filters import Regexp
from aiogram.types import CallbackQuery

from keyboards import kb2b
from loader import dp, db
from my_logger import logger


async def notif_cancel_to_expert2(expert_id):
    await dp.bot.send_message(expert_id, text=f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–æ–∏—Å–∫–∞—Ç–µ–ª—å –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –≤—Å—Ç—Ä–µ—á–∏. –ü–æ –∫–Ω–æ–ø–∫–µ '
                                              f'"–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã —Å–æ–∏—Å–∫–∞—Ç–µ–ª–µ–π" –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è')
    logger.debug(f'Expert {expert_id} got notif_cancel_to_expert2 notification')


async def notif_cancel_to_applicant(applicant_id, meeting_date, expert_name):
    await dp.bot.send_message(applicant_id, text=f'{expert_name} –æ—Ç–º–µ–Ω–∏–ª –≤—Å—Ç—Ä–µ—á—É, –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—É—é {meeting_date}')
    logger.debug(f'Applicant {applicant_id} got notif_cancel_to_applicant notification of {meeting_date} meeting')


async def notif_cancel_to_applicant2(applicant_id):
    await dp.bot.send_message(applicant_id, text=f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–µ–∫—É—â–∏–π –≥—Ä–∞—Ñ–∏–∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —ç–∫—Å–ø–µ—Ä—Ç–∞ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω. '
                                                 f'–î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ —ç–∫—Å–ø–µ—Ä—Ç–∞?')
    logger.debug(f'Applicant {applicant_id} got notif_cancel_to_applicant2 notification')


async def notif_approved_3hours_to_expert(expert_id, link):
    await dp.bot.send_message(expert_id, text=f'–ù–∞–ø–æ–º–∏–Ω–∞–µ–º –æ —Ç–æ–º, —á—Ç–æ —á–µ—Ä–µ–∑ 3 —á–∞—Å–∞ —É –≤–∞—Å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –≤—Å—Ç—Ä–µ—á–∞.\n\n'
                                              f'–°—Å—ã–ª–∫–∞: {link}')
    logger.debug(f'Expert {expert_id} got notif_approved_3hours_to_expert notification')


async def notif_init_applicant(applicant_id, slot, expert_fullname, meeting_id):
    await dp.bot.send_message(applicant_id, text=f'–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç {expert_fullname} –Ω–∞–∑–Ω–∞—á–∏–ª –≤–∞–º –≤—Å—Ç—Ä–µ—á—É {slot}. <b>–£–∫–∞–∑–∞–Ω–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è</b> '
                                                 f'–í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –µ–µ?',
                              reply_markup=kb2b("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é ‚úÖ", f'approved_a_{meeting_id}',
                                                "–ù–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é ‚ùå", f"denied_a_{meeting_id}"))
    logger.debug(f'Applicant {applicant_id} got notif_init_applicant notification')



async def notif_cancel_3hours_to_expert(expert_id):
    await dp.bot.send_message(expert_id, text=f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–æ–∏—Å–∫–∞—Ç–µ–ª—å –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –≤—Å—Ç—Ä–µ—á–∏. –ü–æ –∫–Ω–æ–ø–∫–µ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å '
                                              f'–∞–Ω–∫–µ—Ç—ã —Å–æ–∏—Å–∫–∞—Ç–µ–ª–µ–π" –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è')
    logger.debug(f'Expert {expert_id} got notif_cancel_3hours_to_expert notification')


async def notif_1day(applicant_id):
    await dp.bot.send_message(applicant_id,
                              text="–ù–∞–ø–æ–º–∏–Ω–∞–µ–º –æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤—Å—Ç—Ä–µ—á–µ. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ –≤—Å—Ç—Ä–µ—á–µ —Ç—ã –º–æ–∂–µ—à—å "
                                   "—É–∑–Ω–∞—Ç—å –≤ –º–µ–Ω—é '–ú–æ–∏ –≤—Å—Ç—Ä–µ—á–∏'. –ó–∞ 3 —á–∞—Å–∞ –¥–æ –≤—Å—Ç—Ä–µ—á–∏ –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º "
                                   "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è –∏ "
                                   "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–∞ –≤—Å—Ç—Ä–µ—á–µ.")
    logger.debug(f'Applicant {applicant_id} got notif_1day notification')


async def notif_3hours(applicant_id, meeting_id):
    await dp.bot.send_message(applicant_id, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–∞ –≤—Å—Ç—Ä–µ—á–µ!",
                              reply_markup=kb2b("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é", f"approved_3hours_{meeting_id}",
                                                "–û—Ç–º–µ–Ω–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É", f"cancel_3hours_{meeting_id}"))
    logger.debug(f'Applicant {applicant_id} got notif_3hours notification about {meeting_id} meeting')


async def notif_1hour(applicant_id):
    await dp.bot.send_message(applicant_id, text="–¢–≤–æ—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å–æ—Å—Ç–æ–∏—Ç—Å—è —É–∂–µ —á–µ—Ä–µ–∑ —á–∞—Å!")
    logger.debug(f'Applicant {applicant_id} got notif_1hour notification')


async def notif_5min(applicant_id):
    await dp.bot.send_message(applicant_id, text="–î–æ –Ω–∞—á–∞–ª–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –æ—Å—Ç–∞–ª–æ—Å—å 5 –º–∏–Ω—É—Ç!")
    logger.debug(f'Applicant {applicant_id} got notif_5min notification')


async def notif_cancel_to_expert(expert_id, meeting_date, applicant_name):
    await dp.bot.send_message(expert_id, text=f'{applicant_name} –æ—Ç–º–µ–Ω–∏–ª –≤—Å—Ç—Ä–µ—á—É, –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—É—é {meeting_date}')
    logger.debug(f'Expert {expert_id} got notif_cancel_to_expert notification about {meeting_date} meeting')


async def notif_init_expert(expert_id, slot, applicant_name, meeting_id):
    await dp.bot.send_message(expert_id, text=f'–°–æ–∏—Å–∫–∞—Ç–µ–ª—å {applicant_name} –Ω–∞–∑–Ω–∞—á–∏–ª –≤–∞–º –≤—Å—Ç—Ä–µ—á—É {slot}. <b>–£–∫–∞–∑–∞–Ω–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è</b>. '
                                              f'–í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –µ–µ?',
                              reply_markup=kb2b("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é ‚úÖ", f'approved_e_{meeting_id}',
                                                "–ù–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é ‚ùå", f"denied_e_{meeting_id}"))
    logger.debug(f'Expert {expert_id} got notif_init_expert notification about meeting {meeting_id}')


async def feedback_notif_applicant(meeting_id):
    md = db.get_meeting(meeting_id)
    await dp.bot.send_message(md[3], text="‚úãüèª –ü—Ä–∏–≤–µ—Ç! –í—á–µ—Ä–∞ —É —Ç–µ–±—è –±—ã–ª–∞ –≤—Å—Ç—Ä–µ—á–∞ —Å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º –†–æ—Å–∞—Ç–æ–º–∞. "
                                          "–ú—ã –±—É–¥–µ–º —Ç–µ–±–µ –ø—Ä–∏–∑–Ω–∞—Ç–µ–ª—å–Ω—ã, –µ—Å–ª–∏ —Ç—ã –æ—Å—Ç–∞–≤–∏—à—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å. "
                                          "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –ø—Ä–æ–≤–æ–¥–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –Ω–∞ –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–æ–º —É—Ä–æ–≤–Ω–µ!",
                              reply_markup=kb2b("–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", f"applicant_fb_agree_{md[0]}",
                                                "–ù–µ —Ö–æ—á—É –ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤", "applicant_menu"))
    logger.debug(f'Applicant {md[3]} got feedback_notif_applicant notification about meeting {meeting_id}')


async def feedback_notif_expert(meeting_id):
    md = db.get_meeting(meeting_id)
    await dp.bot.send_message(md[2], text="‚úãüèª –ü—Ä–∏–≤–µ—Ç! –í—á–µ—Ä–∞ —É –≤–∞—Å –±—ã–ª–∞ –≤—Å—Ç—Ä–µ—á–∞ —Å —Å–æ–∏—Å–∫–∞—Ç–µ–ª–µ–º. "
                                          "–ú—ã –±—É–¥–µ–º –ø—Ä–∏–∑–Ω–∞—Ç–µ–ª—å–Ω—ã, –µ—Å–ª–∏ –≤—ã –æ—Å—Ç–∞–≤–∏—Ç–µ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å. "
                                          "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –ø—Ä–æ–≤–æ–¥–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –Ω–∞ –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–æ–º —É—Ä–æ–≤–Ω–µ!",
                              reply_markup=kb2b("–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", f"expert_fb_agree_{md[0]}",
                                                "–ù–µ —Ö–æ—á—É –ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤", "expert_menu"))
    logger.debug(f'Expert {md[2]} got feedback_notif_applicant notification about meeting {meeting_id}')


async def notif_after_show_contacts(pressed_user_id, second_user_id):
    await dp.bot.send_message(pressed_user_id,
                              text="–£–¥–∞–ª–æ—Å—å –ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º?",
                              reply_markup=kb2b("–î–∞", f"local_contact_yes_{second_user_id}",
                                                "–ù–µ—Ç", f"local_contact_no_{second_user_id}"))
    logger.debug(f'User {pressed_user_id} got notif_after_show_contacts notification about'
                 f' local contact with {second_user_id}')


@dp.callback_query_handler(Regexp(r'^local_contact_'))
async def local_contact_took_place_or_not(call: CallbackQuery):
    second_user_id = call.data.split("_")[3]

    choice = call.data.split("_")[2]
    if choice == "yes":
        status = "–°–≤—è–∑–∞–ª–∏—Å—å"
    else:
        status = "–ù–µ —Å–≤—è–∑–∞–ª–∏—Å—å"

    db.add_local_contact(call.from_user.id, second_user_id, status)

    await call.message.edit_reply_markup()
    await call.message.edit_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç!")

    logger.debug(f'User {call.from_user.id} entered local_contact_took_place_or_not handler')
